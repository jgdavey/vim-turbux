*turbux.txt*  Turbo Ruby tests with tmux

Author:  Joshua Davey <http://joshuadavey.com/>
License: Same terms as Vim itself (see |license|)

This plugin is only available if 'compatible' is not set.

This plugin can optionally be used with vim-dispatch, tslime.vim,
vim-tmux-runner, or vimux, whichever is available. It also supports
neovim via terminal emulator.

It also depends optionally on rails.vim.

INTRODUCTION                                    *turbux*

Turbux is designed to speed up your TDD cycle by using a single key
mapping to run the most relevant test based on the current file in vim.
With either tslime or vimux, it uses tmux's scriptability to send
commands to a chosen pane in your tmux session.

The default mapping for invoking the plugin is <leader>t. In a spec
file, this will run "rspec <filename>". In a test-unit file, this will
run "ruby -Itest <filename>". In a cucumber feature file, this will run
"cucumber <filename>".

If rails.vim is present, some additional niceties are provided. When
rails.vim can find an alternate file for the current one, and that file
is a spec or test, it will run the alternate file rather than the one
you are in. For example, given the following two files:
>
        app/models/foo.rb
        spec/models/foo_bar.rb
<
When the current file and is "foo.rb" and you invoke the plugin, the
following command will be sent the configured tmux pane:
>
        rspec spec/models/foo_bar.rb
<
Note: this plugin does not work well with |autochdir|. The working
directories for the target pane and vim should match.


REPEATING                                        *turbux-repeating*

If you invoke the plugin (by default, with <leader>t), and neither the
current file nor the alternate is a test, spec or feature, turbux will
simply send the most recent command instead. This can be quite helpful
in situations where you are editing a related file, or in the case of
cucumber, step definitions or a view.

The |turbux| and |turbux-focused| invocations each store their own
command, so you can use the focused one elsewhere in a test suite while
still setting the normal one, or vice-versa.


FOCUSED                                          *turbux-focused*

Turbux also comes with bindings to run focused tests. This is
accomplished by appending the current line number to the test command.
In cucumber, this runs the scenario under the cursor. In rspec, this
runs only the example or group under the cursor.

The default mapping for focused test output is <leader>T.


CONFIGURATION                                    *turbux-config*

Turbux attempts to intelligently determine the most appropriate test
runner based on loaded plugins. You can manually set the test runner
with the following setting:
>
          let g:turbux_runner = 'vim'      " default: neovim (if running neovim) OR dispatch OR vimux OR tslime OR vtr OR vim
>
Use the following in your vimrc to set a common command prefix for prepending
all commands:
>
          let g:turbux_command_prefix = 'bundle exec' " default: (empty)
<
You can also choose your own commands for each test framework. A command use
case is to use 'spec' instead of 'rspec' for older versions of RSpec.
>
          let g:turbux_command_rspec  = 'spec'        " default: rspec
          let g:turbux_command_test_unit = 'ruby'     " default: ruby -Itest
          let g:turbux_command_cucumber = 'cucumber'  " default: cucumber -rfeatures
          let g:turbux_command_turnip = 'rspec'       " default: rspec -rturnip
          let g:turbux_command_teaspoon = 'teaspoon'  " default: teaspoon
<
You can implement a custom test runner. The following is one such example:
>
          let g:turbux_custom_runner = 'TurbuxCustomRunner' " default: (unset)
          function! TurbuxCustomRunner(command)
            call VimuxRunCommand("shrink")
            call VimuxClearRunnerHistory()
            return VimuxRunCommand(a:command)
          endfunction
<
MAPPING                                         *turbux-mappings*

<Plug>SendTestToTmux              Normal invocation
<Plug>SendFocusedTestToTmux       Focused test (appends line number or named
test)

And the following are available unless "g:no_turbux_mappings" is set:

<leader>t                         Normal invocation
<leader>T                         Focused test

To use custom mappings, you can put something like the following in your
vimrc:
>
          let g:no_turbux_mappings = 1
          map <leader>rt <Plug>SendTestToTmux
          map <leader>rT <Plug>SendFocusedTestToTmux
<

 vim:tw=78:et:ft=help:norl:
